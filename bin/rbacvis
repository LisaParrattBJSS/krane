#!/usr/bin/env ruby

require 'rubygems'
require 'bundler'
Bundler.require(:default)

require 'commander'
require 'colorize'
require 'redisgraph'
require 'active_support/core_ext/object/blank'
require 'active_support/core_ext/string'

require 'rbac_visualiser'
require 'cli'

class CLI
  include Commander::Methods
  include Cli::Helpers
  include RbacVisualiser::Helpers

  DEFAULT_DASHBOARD_PORT = 8000
  DEFAULT_REPORT_OUTPUT = :yaml

  def run
    program :name, 'rbacvis'
    program :version, RbacVisualiser::VERSION
    program :description, 'Kubernetes RBAC static analysis & visualisation tool'
    program :help, 'Author', 'Marcin Ciszak <marcin.ciszak@appvia.io>'

    # never_trace!

    default_command :help

    command :report do |c|
      c.syntax = 'rbacvis report [options]'
      c.summary = 'K8s RBAC report'
      c.description = 'Generates K8s RBAC static analysis report for given cluster'
      c.example 'to generate report', 'rbacvis report --cluster your-cluster-name'
      c.option '-c', '--cluster [CLUSTER NAME]', String, 'Cluster name'
      c.option '-o', '--output [OUTPUT]', String, '(json|yaml|none) Default: yaml'
      c.option '-d', '--dir [PATH]', String, 'Path to RBAC yaml files (roles, rolebinding, clusterroles, clusterrolebinding, psps)'
      c.option '-k', '--kubectlcontext [CONTEXT]', String, 'Kubectl config context name for fetching RBAC from running cluster. This is alternative to loading RBAC from the filesystem.'
      c.option '--verbose', 'Makes output verbose'
      c.action do |args, options|
        options.default output: DEFAULT_REPORT_OUTPUT
        options.default dir: nil
        options.default kubectlcontext: nil
        options.default local: false

        banner :info, 'This may take several seconds to complete...'

        raise_on_cluster_missing options
        raise_on_missing_path_or_context options

        report = RbacVisualiser::Report.new(
          cluster: options.cluster, 
          dir: options.dir,
          kubectlcontext: options.kubectlcontext,
          verbose: !!options.verbose,
          index: true
        ).run

        say report.to_yaml if options.output.to_sym == :yaml
        say JSON.pretty_generate(report) if options.output.to_sym == :json
      end
    end

    command :dashboard do |c|
      c.syntax = 'rbacvis dashboard [options]'
      c.summary = 'K8s RBAC Visualisation dashboard'
      c.description = 'Kubernetes RBAC Visualisation dashboard'
      c.example 'to open UI dashboard', 'rbacvis dashboard'
      c.option '-c', '--cluster [CLUSTER NAME]', String, 'Cluster name'
      c.option '-p', '--port [PORT]', Integer, 'Dahboard UI custom port. Default: 8000'
      c.option '--verbose', 'Makes output verbose'
      c.action do |args, options|
        options.default port: DEFAULT_DASHBOARD_PORT

        raise_on_cluster_missing options
        raise_on_cluster_report_missing options

        say "---".light_cyan
        say "RBAC visualiser DASHBOARD:".light_cyan
        say "http://127.0.0.1:#{options.port}/dashboard?cluster=#{options.cluster}".light_cyan
        say "---".light_cyan

        %x(ruby -run -e httpd . -p #{options.port})
      end
    end

    run!
  end

end

CLI.new.run if $0 == __FILE__
